
#если будешь отлаживать на своем компе а не на сайте раскомменть строки с меткой "это для отладки" и закомменть те,что определяют те же переменные

numberOfStrings = int(input()) #считали первую строку, т.е. чиселку. Т.к. счтывается строка то преобразуем ее в int - целое число
#numberOfStrings = 1 #это для отладки

text = "" # объявили пустую строку text
for i in range (0, numberOfStrings): #в цикле от 0 до считанного кол-ва строк записываем данные из input() в нашу строку text
    text += input()
#text = 'раз раз раз раз это хардбас два ара ара ара три четыре пять с детства с рифмой я дружу' #это для отладки

words = text.split() #разбили сплошную строку текста на отдельные слова, т.е. сделали лист. Было "слово1 слово2 слово3" стало "слово1" "слово2" "слово3"
counts = [0 for i in range(len(words))] # создали массив(лист) в КоличествоСловВТексте элементов заполенный нулями 
                                        #(это даже слишком много, но чтобы сэкономить здесь памят ьмне надо перелопатить всю прогу а мне лень

freq_dict = dict(zip(words,counts)) #построили словарь "слово(words) - кол.во(counts)" где кол-во сейчас для каждого слова 0.
#Конструктор словоря сам выкидывает повторы слов и берет ровоно столько эл-тов массива counts сколько есть уникальных слов в тексте, остальные просто игнорирует

for i in range(len(words)): #для i от 0 до КоличествоСловВТексте (снова слишком много - нам хватило бы длины словаря, но мне снова лень оптимизировать)
    if freq_dict[words[i]] == 0: #если в словаре freq_dict по ключу words[i] лежит значение 0 (т.е. если еще это слово не считали)
        freq_dict[words[i]] = words.count(words[i]) #то посчитать количество вхождений данного слова в текст и сделать это число значением вместо 0


def maxVal_minKey(MyDict): #как порядошные люди запилили отдельную функцию принимающую словарь и 
    #возвращающую слово с максимальным числом вхождений в текст и минимальным алфовитным порядком
    top = [] #топ слов по кол-ву вхождения, пока пустой
    for key,val in MyDict.items(): #для key и val из используемого словаря
        if val == max(MyDict.values()) and (key not in top): #если значение ключа (число вхождений слова для данного слова)
                                                             #равно максимальному числу вхождений и ключ (слово) еще не находится в отпе
           top.append(key) #тогда вставь в топ это слово
    top.sort() #отсортируй слова в топе 
    return top[0] #верни первое слово в отсортированном топе

print(maxVal_minKey(freq_dict)) #Напечатай то, что вернула наша функция maxVal_minKey когда ей дали наш словарь freq_dict

