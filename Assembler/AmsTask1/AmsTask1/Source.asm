
.386
.MODEL FLAT, STDCALL

;####################################################################;

; прототипы внешних функций (процедур) описываются директивой EXTERN, 
; после знака @ указывается общая длина передаваемых параметров,
; после двоеточия указывается тип внешнего объекта – процедура

EXTERN  GetStdHandle@4: PROC    ;Функция получения дескрипторов
							    ;аргументом которой может являться следующая из трех констант
							    ;определяющая получаемый дескриптор: –10 для ввода, –11 для вывода, –12 для сообщения об ошибке.
							    ;Функция возвращает дескриптор в регистре ЕАХ.

EXTERN  WriteConsoleA@20: PROC  ;Функция вывода текстовой информации 
								;параметры которой имеют следующий смысл: 
								;1) дескриптор вывода, который получен при помощи функции GetStdHandle; 
								;2) адрес буфера, в котором находится выводимый текст; 
								;3) количество выводимых символов; 
								;4) адрес переменной, в которую будет помещено количество действитель-но выведенных символов; 
								;5) резервный параметр, должен быть равен нулю. 
								;Заметим, что буфер, где находится выводимый текст, не обязательно дол-жен заканчиваться нулем, поскольку для данной функции указывается количе-ство выводимых символов. 

EXTERN  CharToOemA@8: PROC		;Функция перекодировки всех констант в DOS-format
								;Первым параметром этой функции является адрес строки, которую следует пе-рекодировать, 
								;а вторым параметром – адрес строки, куда следует поместить ре-зультат. 
								;Причем поместить результат можно и в строку, которую желаем пере-кодировать. 

EXTERN  ReadConsoleA@20: PROC	;Функция чтения с консоли
								;Значения параметров этой функции следующие:
								;1) дескриптор ввода, который получен при помощи функции GetStdHandle;
								;2) адрес буфера, в который будет помещена вводимая информация;
								;3) длина буфера;
								;4) адрес переменной, в которую будет помещено количество действитель-но введенных символов;
								;5) резервный параметр, должен быть равен нулю.

EXTERN  ExitProcess@4: PROC		; функция выхода из программы

EXTERN  lstrlenA@4: PROC		; функция определения длины строки
								; т.к. число параметров функции не фиксировано,
							    ; используется соглашение, согласно которому очищает стек 
							    ; вызывающая процедура

EXTERN  wsprintfA: PROC         ;преобразует заданный список переменных в символьную форму в соответствии 
								;с указанным списком форматов преобразования и помещает образованную строку в заданный буфер. 
								;Строка завершается нулем. Параметры функции имеют следующий смысл: 
								;1) адрес буфера, в который будет помещена строка; 
								;2) адрес строки со списком форматов; 
								;3) список переменных.
								;Заметим, что каждая переменная из списка представляет собой отдельный параметр. 
								;Таким образом, функция имеет переменное число параметров. Воз-вращаемое через регистр ЕАХ значение – длина строки.

			
;####################################################################;

.DATA; сегмент данных
STRN1 DB "Введите умножаемое: ",13,10,0		; выводимые строки, в конце добавлены
STRN2 DB "Введите множитель: ",13,10,0		; управляющие символы: 13 – возврат каретки, 10 – переход на новую 
										    ; строку, 0 – конец строки; с использованием директивы DB 
											; резервируется массив байтов
DSCR DB "Программа умножения целых неотрицательных чисел в десятичной системе. Вывод в шестнадцатиричной.",13,10,0 ;description

SRCNUM DB "0123456789ABCDEF",13,10,0
RESBUFF DB "0123456789ABCDEF",13,10,0

FMT DB "Result: %d", 0; строка со списком форматов для функции wsprintfA
DIN DD ?		; дескриптор ввода; директива DD резервирует память объемом
		  		; 32 бита (4 байта), знак «?» используется для неинициализированных данных
DOUT DD ?		   ; дескриптор вывода
BUF  DB 200 dup (?); буфер для вводимых/выводимых строк длиной 200 байтов
LENS DD ?		   ; переменная для количества выведенных символов
OFFS1 DD ?
OFFS2 DD ?
COUNT DD ?
I DD ?
NUM1 DD ?
NUM2 DD ?
SYMB DD ?
STR_PTR DD ?

;####################################################################;

.CODE	 ; сегмент кода 
MAIN PROC; описание процедуры

; перекодируем строку DSCR
MOV  EAX, OFFSET DSCR; командой MOV  значение второго операнда 
					  ; перемещается в первый, OFFSET – операция, возвращающая адрес
PUSH EAX ; параметры функции помещаются в стек командой PUSH
PUSH EAX
CALL CharToOemA@8; вызов функции
PUSH -10;
CALL GetStdHandle@4
MOV DIN, EAX;
PUSH -11;
CALL GetStdHandle@4;
MOV DOUT, EAX;

; перекодируем строку STRN1
MOV  EAX, OFFSET STRN1;
PUSH EAX
PUSH EAX
CALL CharToOemA@8;
PUSH -10;
CALL GetStdHandle@4
MOV DIN, EAX;
PUSH -11;
CALL GetStdHandle@4;
MOV DOUT, EAX;

; перекодируем строку STRN2
MOV  EAX, OFFSET STRN2;
PUSH EAX
PUSH EAX
CALL CharToOemA@8;
PUSH -10;
CALL GetStdHandle@4
MOV DIN, EAX;
PUSH -11;
CALL GetStdHandle@4;
MOV DOUT, EAX;

;------------------------------------------------------------
; Description программы
PUSH OFFSET DSCR
CALL lstrlenA@4
PUSH 0				;5
PUSH OFFSET LENS    ;4
PUSH EAX			;3
PUSH OFFSET DSCR	;26
PUSH DOUT			;1
CALL WriteConsoleA@20; Выводим текст с описание программы
;------------------------------------------------------------
;Ввод строки 1
L_INPUT_LOOP:
	PUSH OFFSET STRN1
	CALL lstrlenA@4
	PUSH 0				;5
	PUSH OFFSET LENS    ;4
	PUSH EAX			;3
	PUSH OFFSET STRN1	;26
	PUSH DOUT			;1
	
	CALL WriteConsoleA@20; Выводим предложение ввода 1 числа
	PUSH 0
	PUSH OFFSET LENS
	PUSH 200
	PUSH OFFSET BUF
	PUSH DIN

	CALL ReadConsoleA@20;Чтение строки в buf, длина в LENS
;------------------------------------------------------------
; проверка корректности строки.первое число
	MOV OFFS1, OFFSET BUF
	MOV i,2
	MOV esi, OFFSET BUF
	MOV NUM1, 0
	MOV NUM2, 0
	L_N1_CHECK:
		MOV eax,I
		CMP eax, LENS
		JGE L_N1_CHECK_END;	если завершён цикл по с

		MOV BL, [esi]
		INC esi
		INC I
		;---интервал [0-9]
		CMP BL, '9'
		CMP BL,'0'
		JL L_INPUT_LOOP
		INC NUM1
		JMP L_N1_CHECK
				
	L_N1_CHECK_END:
	CMP NUM1, 0
	JE L_INPUT_LOOP
;------------------------------------------------------------

;------------------------------------------------------------
;Ввод строки 2
L_INPUT2_LOOP:
	PUSH OFFSET STRN2
	CALL lstrlenA@4
	PUSH 0				;5
	PUSH OFFSET LENS    ;4
	PUSH EAX			;3
	PUSH OFFSET STRN2	;26
	PUSH DOUT			;1
	CALL WriteConsoleA@20;Выводим предложение ввода 2 числа

	PUSH 0
	PUSH OFFSET LENS
	PUSH 200
	PUSH OFFSET BUF
	PUSH DIN
	CALL ReadConsoleA@20;Чтение строки в buf, длина в LENS
;------------------------------------------------------------
; проверка корректности строки. Второе число
	MOV OFFS2, OFFSET BUF
	MOV i,2
	MOV esi, OFFSET BUF
	MOV NUM1, 0
	MOV NUM2, 0
	L_N2_CHECK:
		MOV eax,I
		CMP eax, LENS
		JGE L_N2_CHECK_END;	если завершён цикл по с

		MOV BL, [esi]
		INC esi
		INC I
		;---интервал [0-9]
		CMP BL, '9'
		CMP BL,'0'
		JL L_INPUT_LOOP
		INC NUM1
		JMP L_N2_CHECK
				
	L_N2_CHECK_END:
	CMP NUM1, 0
	JE L_INPUT_LOOP
;------------------------------------------------------------
;подсчёт числа знаков, запись в i
MOV i,1
MOV EAX, NUM1
MOV EBX, 10
MOV EDX, 0
Lt_LOOP:
	DIV EBX
	CMP EAX, 0
	JE LT_LOOP_END
	INC i
	MOV EDX,0
	JMP Lt_LOOP
LT_LOOP_END:
;------------------------------------------------------------
;запись числа в BUF и сложение
MOV ESI, OFFSET BUF
ADD ESI, I
MOV BL, 13
MOV [ESI], BL
MOV BL, 10
MOV [ESI+1], BL
MOV BL, 0
MOV [ESI+2], BL 
MOV EAX, NUM1
MOV EBX, 10
MOV EDX, 0

L4_LOOP:
	CMP I, 0
	JE L4_LOOP_END
	DEC I
	DEC ESI
	DIV EBX
	ADD EDX, '0'
	MOV [ESI], DL
	MOV EDX,0
	JMP L4_LOOP

L4_LOOP_END:
;------------------------------------------------------------
PUSH OFFSET BUF
CALL lstrlenA@4
PUSH 0				
PUSH OFFSET LENS    
PUSH EAX			
PUSH OFFSET BUF 	
PUSH DOUT			
CALL WriteConsoleA@20;			 

; выход из программы 
PUSH 0; параметр: код выхода
CALL ExitProcess@4
MAIN ENDP
END MAIN
;------------------------------------------------------------


