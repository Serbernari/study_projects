#include<iostream>
#include<queue>
using namespace std;
int main() 
{
	int n; //размерность доски
	int x1; //коорднинаты страта
	int y1;
	int x2; //координаты финиша
	int y2;
	queue<pair<int, int>> q; //создаем очередь (первый зашел - первый вышел)
	int x[8] = { -2, -2, -1, -1, 1, 1, 2, 2 }, //все возможные изменения координаты х
		y[8] = { -1, 1, -2, 2, -2, 2, -1, 1 }; //все возможные изменения координаты у
	cin >> n; //cчитали размерность
	int desk[n + 1][n + 1]; //создаем массив "доска"
	
	for (int i = 0; i <= n; ++i) 
		for (int j = 0; j <= n; ++j)
			desk[i][j] = 1000000000; //забиваем всю доску хуйней

	cin >> x1 >> y1 >> x2 >> y2; //считали коорлинаты старта и финиша
	desk[x1][y1] = 0; //поставили значение старта 0
	q.push(make_pair(x1, y1)); //сохранили координаты старта в очередь. сейчас в очереди 1 элемент.
	
	while (!q.empty())  //пока очередь не пуста
	{
		int i = q.front().first; //взяли коордиату Х верхнего эл-та очереди
		int j = q.front().second; //взяли коордиату У верхнего эл-та очереди
		q.pop(); //убрали один эл-т с верха очереди

		for (int k = 0; k < 8; ++k) //пробег по всем возможным вар-там изменения координат (см строку 12 и 13)
		{
			int u = i + x[k]; //новая координата u = старая координата Х + один из вариантов изменения
			int v = j + y[k]; //новая координата u = старая координата У + один из вариантов изменения
			//Если (u больше 0) И (u меньше или равен n) И (v больше 0) И (v меньше или равен n) --- т.е. если всё еще в пределах доски
			//И если в этой клетки доски лежит хуйня
			if (u > 0 && u <= n && v > 0 && v <= n && desk[u][v] > desk[i][j] + 1) 
			{
				//в эту клетку доски положить значение предыдущей клетки пребывания коня + 1, т.е. число шагов
				desk[u][v] = desk[i][j] + 1; 
				//пихай эту клетку в очередь
				q.push(make_pair(u, v));
				//так, по сути проходятся все клетки доски
			}
		}
	}
	cout << desk[x2][y2]; //выведи числеку котрая лежит в клетке финиша, т.е. за сколько ходов там оказался конь.
	//еще раз: он там не останавливался, конь прошагал всю доску, но мы просто смотрим за сколько ходов он до туда дошел
	return 0;
}